/*-
 * Copyright (c) 2015 Landon Fuller <landon@landonf.org>
 * Copyright (c) 2010 Broadcom Corporation
 * 
 * This file is derived from the sbconfig.h header distributed with
 * Broadcom's initial brcm80211 Linux driver release, as
 * contributed to the Linux staging repository. 
 *
 * Permission to use, copy, modify, and/or distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION
 * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
 * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 * 
 * $FreeBSD$
 */

#ifndef _BHND_SIBA_CONFIGREG_H_
#define _BHND_SIBA_CONFIGREG_H_

/*
 * Sonics Configuration Space Registers.
 * 
 * Backplane configuration registers common to siba(4) core register
 * blocks.
 */

/**
 * Extract a config attribute by applying _MASK and _SHIFT defines.
 * 
 * @param _reg The register value containing the desired attribute
 * @param _attr The BCMA EROM attribute name (e.g. ENTRY_ISVALID), to be
 * concatenated with the `SB` prefix and `_MASK`/`_SHIFT` suffixes.
 */
#define	SB_REG_GET(_entry, _attr)			\
	((_entry & SB ## _attr ## _MASK)	\
	>> SB ## _attr ## _SHIFT)

#define	SB_CFG1_OFFSET	0xf00	/**< register block 1 */
#define	SB_CFG2_OFFSET	0xe00	/**< register block 2 (sonics >= 2.3) */

#define	SB_CFG_SIZE	256	/**< register block size */

/* Define a register relative to either the CFG1 or CFG2 block offset */
#define	SB_REG(cb, off)	(SB_CFG ## cb ## _OFFSET + (off))
#define SB1_REG(off)	SB_REG(1, (off))
#define	SB2_REG(off)	SB_REG(2, (off))

#define	SBIPSFLAG	SB1_REG(0x08)	/**< initiator port ocp slave flag */
#define	SBTPSFLAG	SB1_REG(0x18)	/**< target port ocp slave flag */
#define	SBTMERRLOGA	SB1_REG(0x48)	/**< sonics >= 2.3 */
#define	SBTMERRLOG	SB1_REG(0x50)	/**< sonics >= 2.3 */
#define	SBADMATCH3	SB1_REG(0x60)	/**< address match3 */
#define	SBADMATCH2	SB1_REG(0x68)	/**< address match2 */
#define	SBADMATCH1	SB1_REG(0x70)	/**< address match1 */
#define	SBIMSTATE	SB1_REG(0x90)	/**< initiator agent state */
#define	SBINTVEC	SB1_REG(0x94)	/**< interrupt mask */
#define	SBTMSTATELOW	SB1_REG(0x98)	/**< target state */
#define	SBTMSTATEHIGH	SB1_REG(0x9c)	/**< target state */
#define	SBBWA0		SB1_REG(0xa0)	/**< bandwidth allocation table0 */
#define	SBIMCONFIGLOW	SB1_REG(0xa8)	/**< initiator configuration */
#define	SBIMCONFIGHIGH	SB1_REG(0xac)	/**< initiator configuration */
#define	SBADMATCH0	SB1_REG(0xb0)	/**< address match0 */
#define	SBTMCONFIGLOW	SB1_REG(0xb8)	/**< target configuration */
#define	SBTMCONFIGHIGH	SB1_REG(0xbc)	/**< target configuration */
#define	SBBCONFIG	SB1_REG(0xc0)	/**< broadcast configuration */
#define	SBBSTATE	SB1_REG(0xc8)	/**< broadcast state */
#define	SBACTCNFG	SB1_REG(0xd8)	/**< activate configuration */
#define	SBFLAGST	SB1_REG(0xe8)	/**< current sbflags */
#define	SBIDLOW		SB1_REG(0xf8)	/**< identification */
#define	SBIDHIGH	SB1_REG(0xfc)	/**< identification */

#define	SBIMERRLOGA	SB2_REG(0xa8)	/**< sonics >= 2.3 */
#define	SBIMERRLOG	SB2_REG(0xb0)	/**< sonics >= 2.3 */
#define	SBTMPORTCONNID0	SB2_REG(0xd8)	/**< sonics >= 2.3 */
#define	SBTMPORTLOCK0	SB2_REG(0xf8)	/**< sonics >= 2.3 */

/* sbipsflag */
#define	SBIPS_INT1_MASK		0x3f	/* which sbflags get routed to mips interrupt 1 */
#define	SBIPS_INT1_SHIFT	0
#define	SBIPS_INT2_MASK		0x3f00	/* which sbflags get routed to mips interrupt 2 */
#define	SBIPS_INT2_SHIFT	8
#define	SBIPS_INT3_MASK		0x3f0000	/* which sbflags get routed to mips interrupt 3 */
#define	SBIPS_INT3_SHIFT	16
#define	SBIPS_INT4_MASK		0x3f000000	/* which sbflags get routed to mips interrupt 4 */
#define	SBIPS_INT4_SHIFT	24

/* sbtpsflag */
#define	SBTPS_NUM0_MASK		0x3f	/* interrupt sbFlag # generated by this core */
#define	SBTPS_F0EN0		0x40	/* interrupt is always sent on the backplane */

/* sbtmerrlog */
#define	SBTMEL_CM		0x00000007	/* command */
#define	SBTMEL_CI		0x0000ff00	/* connection id */
#define	SBTMEL_EC		0x0f000000	/* error code */
#define	SBTMEL_ME		0x80000000	/* multiple error */

/* sbimstate */
#define	SBIM_PC			0xf	/* pipecount */
#define	SBIM_AP_MASK		0x30	/* arbitration policy */
#define	SBIM_AP_BOTH		0x00	/* use both timeslaces and token */
#define	SBIM_AP_TS		0x10	/* use timesliaces only */
#define	SBIM_AP_TK		0x20	/* use token only */
#define	SBIM_AP_RSV		0x30	/* reserved */
#define	SBIM_IBE		0x20000	/* inbanderror */
#define	SBIM_TO			0x40000	/* timeout */
#define	SBIM_BY			0x01800000	/* busy (sonics >= 2.3) */
#define	SBIM_RJ			0x02000000	/* reject (sonics >= 2.3) */

/* sbtmstatelow */
#define	SBTML_RESET		0x0001	/* reset */
#define	SBTML_REJ_MASK		0x0006	/* reject field */
#define	SBTML_REJ		0x0002	/* reject */
#define	SBTML_TMPREJ		0x0004	/* temporary reject, for error recovery */

#define	SBTML_SICF_SHIFT	16	/* Shift to locate the SI control flags in sbtml */

/* sbtmstatehigh */
#define	SBTMH_SERR		0x0001	/* serror */
#define	SBTMH_INT		0x0002	/* interrupt */
#define	SBTMH_BUSY		0x0004	/* busy */
#define	SBTMH_TO		0x0020	/* timeout (sonics >= 2.3) */

#define	SBTMH_SISF_SHIFT	16	/* Shift to locate the SI status flags in sbtmh */

/* sbbwa0 */
#define	SBBWA_TAB0_MASK		0xffff	/* lookup table 0 */
#define	SBBWA_TAB1_MASK		0xffff	/* lookup table 1 */
#define	SBBWA_TAB1_SHIFT	16

/* sbimconfiglow */
#define	SBIMCL_STO_MASK		0x7	/* service timeout */
#define	SBIMCL_RTO_MASK		0x70	/* request timeout */
#define	SBIMCL_RTO_SHIFT	4
#define	SBIMCL_CID_MASK		0xff0000	/* connection id */
#define	SBIMCL_CID_SHIFT	16

/* sbimconfighigh */
#define	SBIMCH_IEM_MASK		0xc	/* inband error mode */
#define	SBIMCH_TEM_MASK		0x30	/* timeout error mode */
#define	SBIMCH_TEM_SHIFT	4
#define	SBIMCH_BEM_MASK		0xc0	/* bus error mode */
#define	SBIMCH_BEM_SHIFT	6

/* sbadmatch0 */
#define	SBAM_TYPE_MASK		0x3	/* address type */
#define	SBAM_AD64		0x4	/* reserved */
#define	SBAM_ADINT0_MASK	0xf8	/* type0 size */
#define	SBAM_ADINT0_SHIFT	3
#define	SBAM_ADINT1_MASK	0x1f8	/* type1 size */
#define	SBAM_ADINT1_SHIFT	3
#define	SBAM_ADINT2_MASK	0x1f8	/* type2 size */
#define	SBAM_ADINT2_SHIFT	3
#define	SBAM_ADEN		0x400	/* enable */
#define	SBAM_ADNEG		0x800	/* negative decode */
#define	SBAM_BASE0_MASK		0xffffff00	/* type0 base address */
#define	SBAM_BASE0_SHIFT	8
#define	SBAM_BASE1_MASK		0xfffff000	/* type1 base address for the core */
#define	SBAM_BASE1_SHIFT	12
#define	SBAM_BASE2_MASK		0xffff0000	/* type2 base address for the core */
#define	SBAM_BASE2_SHIFT	16

/* sbtmconfiglow */
#define	SBTMCL_CD_MASK		0xff	/* clock divide */
#define	SBTMCL_CO_MASK		0xf800	/* clock offset */
#define	SBTMCL_CO_SHIFT		11
#define	SBTMCL_IF_MASK		0xfc0000	/* interrupt flags */
#define	SBTMCL_IF_SHIFT		18
#define	SBTMCL_IM_MASK		0x3000000	/* interrupt mode */
#define	SBTMCL_IM_SHIFT		24

/* sbtmconfighigh */
#define	SBTMCH_BM_MASK		0x3	/* busy mode */
#define	SBTMCH_RM_MASK		0x3	/* retry mode */
#define	SBTMCH_RM_SHIFT		2
#define	SBTMCH_SM_MASK		0x30	/* stop mode */
#define	SBTMCH_SM_SHIFT		4
#define	SBTMCH_EM_MASK		0x300	/* sb error mode */
#define	SBTMCH_EM_SHIFT		8
#define	SBTMCH_IM_MASK		0xc00	/* int mode */
#define	SBTMCH_IM_SHIFT		10

/* sbbconfig */
#define	SBBC_LAT_MASK		0x3	/* sb latency */
#define	SBBC_MAX0_MASK		0xf0000	/* maxccntr0 */
#define	SBBC_MAX0_SHIFT		16
#define	SBBC_MAX1_MASK		0xf00000	/* maxccntr1 */
#define	SBBC_MAX1_SHIFT		20

/* sbbstate */
#define	SBBS_SRD		0x1	/* st reg disable */
#define	SBBS_HRD		0x2	/* hold reg disable */

/* sbidlow */
#define	SBIDL_CS_MASK		0x3	/* config space */
#define	SBIDL_CS_SHIFT		0
#define	SBIDL_ADDR_RANGE_MASK	0x38	/* # address ranges supported */
#define	SBIDL_ADDR_RANGE_SHIFT	3
#define	SBIDL_SYNCH		0x40	/* sync */
#define	SBIDL_INIT		0x80	/* initiator */
#define	SBIDL_MINLAT_MASK	0xf00	/* minimum backplane latency */
#define	SBIDL_MINLAT_SHIFT	8
#define	SBIDL_MAXLAT_MASK	0xf000	/* maximum backplane latency */
#define	SBIDL_MAXLAT_SHIFT	12
#define	SBIDL_FIRST_MASK	0x10000	/* this initiator is first */
#define	SBIDL_FIRST_SHIFT	16
#define	SBIDL_CW_MASK		0xc0000	/* cycle counter width */
#define	SBIDL_CW_SHIFT		18
#define	SBIDL_TP_MASK		0xf00000	/* target ports */
#define	SBIDL_TP_SHIFT		20
#define	SBIDL_IP_MASK		0xf000000	/* initiator ports */
#define	SBIDL_IP_SHIFT		24
#define	SBIDL_SBREV_MASK	0xf0000000	/* sonics backplane revision code */
#define	SBIDL_SBREV_SHIFT	28
#define	SBIDL_SBREV_2_2		0x0		/* version 2.2 or earlier */
#define	SBIDL_SBREV_2_3		0x1		/* version 2.3 */

/* sbidhigh */
#define	SBIDH_RC_MASK		0x000f	/* revision code */
#define	SBIDH_RCE_MASK		0x7000	/* revision code extension field */
#define	SBIDH_RCE_SHIFT		8
#define	SB_CORE_REV(sbidh) \
	((((sbidh) & SBIDH_RCE_MASK) >> SBIDH_RCE_SHIFT) | ((sbidh) & SBIDH_RC_MASK))
#define	SBIDH_DEVICE_MASK	0x8ff0	/* core code */
#define	SBIDH_DEVICE_SHIFT	4
#define	SBIDH_VENDOR_MASK	0xffff0000	/* vendor code */
#define	SBIDH_VENDOR_SHIFT	16

#define	SB_COMMIT		0xfd8	/* update buffered registers value */

/* vendor codes */
#define	SB_VEND_BCM		0x4243	/* Broadcom's SB vendor code */

#endif /* _BHND_SIBA_CONFIGREG_H_ */
